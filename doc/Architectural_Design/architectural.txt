Kiến trúc phân tầng (Layered Architecture) - hay còn được gọi là kiến trúc n-tier (n-tier Architecture) - là kiến trúc phổ biến nhất, được xem là chuẩn không chính thức cho các ứng dụng Java EE và được biết đến rộng rãi bởi hầu hết kiến trúc sư, nhà thiết kế và nhà phát triển. Ý tưởng đằng sau kiến trúc phân tầng là các modules và các thành phần với những chức năng tương tự sẽ được tổ chức thành các tầng nằm ngang. Kết quả là, mỗi tầng thể hiện 1 vai trò cụ thể, độc lập bên trong ứng dụng, việc phát triển, sửa lỗi một tầng không làm ảnh hưởng tới thành phần còn lại.

Tuy nhiên, kiến trúc này vẫn mang một số khuyết điểm:
- Tính linh hoạt tổng thể: vì bản chất nguyên khối, nên đối với các hệ thống mang tính thay đổi liên tục sẽ rất cồng kềnh và tốn thời gian để thực hiện. Vì hệ thống in ấn HCMUT_SSPS là một hệ thống khá đơn giản, chỉ tập trung vào chức năng chính là đáp ứng nhu cầu in ấn của sinh viên và cán bộ công nhân viên nhà trường nên có thể bỏ qua tính linh hoạt tổng thể.
- Hiệu năng: Đây có thể coi như là một kiến trúc gần như mặc định cho các ứng dụng khi bắt đầu chúng ta không biết sử dụng kiến trúc gì. Với độ đơn giản của nó, đối với các ứng dụng lớn hiệu năng sẽ giảm. Cụ thể, vì kiến trúc theo tầng buộc ta phải đi qua từng tầng từng tầng mới đến được tầng cuối cùng (đối với “tầng đóng”), do đó sẽ không hiệu quả khi phải đi qua nhiều tầng của kiến trúc để đáp ứng yêu cầu nghiệp vụ. Đối với hệ thống của chúng ta, hệ thống HCMUT_SSPS kích thước chưa thực sự lớn nên vẫn có thể chấp nhận đặc điểm này.
- Khả năng mở rộng: Do xu hướng triển khai nguyên khối và liên kết chặt chẽ của kiến trúc này, ứng dụng xây dựng theo kiến trúc này thường khó mở rộng quy mô. Vì hệ thống HCMUT_SSPS chỉ tập trung vào việc in ấn cục bộ trong trường nên tạm thời có thể bỏ qua đặc điểm này.

Như vậy, với những đặc điểm kể trên, chúng tôi quyết định phát triển hệ thống theo kiến trúc phân tầng.

Link box-line diagram và deployment diagram: https://drive.google.com/file/d/1uSLhPXXQucKpDXG8maJMItuQE_jDjMmp/view?usp=sharing

Tầng đầu tiên trong kiến trúc là Presentation Layer. Chúng tôi sẽ áp dụng chiến lược tập trung vào sự đơn giản dễ sử dụng và trải nghiệm người dùng. Để đạt được điều này, chúng tôi sẽ sử dụng một số công nghệ hiện đại và cụ thể:
- Front-end library and framework: Chúng tôi sử dụng công nghệ phát triển giao diện người dùng front-end như React. React cho phép chúng tôi tạo ra giao diện linh hoạt và hiệu quả.
- Responsive Design: Đảm bảo phục vụ mọi thiết bị mà sinh viên và cán bộ công nhân viên nhà trường hiện có. Chúng tôi sẽ tích hợp với nhiều loại thiết bị và màn hình khác nhau. Sẽ có các biểu mẫu và thành phần giao diện linh hoạt để đảm bảo trải nghiệm người dùng tốt trên máy tính, điện thoại di động và máy tính bảng.
- User-Friendly Features: Chúng tôi cân nhắc đến các yếu tố trực quan như các nút bấm, các biểu mẫu, menu dễ sử dụng. Nhằm mục đích tạo điều kiện cho những người dùng lần đầu sử dụng vẫn có thể tiếp cận một cách dễ dàng.
Với việc sử dụng React cho phần giao diện người dùng. Cùng với thiết kế linh hoạt và tập trung vào trải nghiệm người dùng, chúng tôi sẽ tạo ra một giao diện ấn tượng cho hệ thống HCMUT_SPSS, đồng thời đảm bảo hệ thống tích hợp tốt với kiến trúc lớp của hệ thống.

Trong layered architecture, database sẽ là lớp ở dưới cùng và sẽ chịu trách nhiệm lưu trữ toàn bộ data và xử lý chúng. Các dữ liệu của ứng dụng sẽ được lưu trữ tại đây và các thao tác như search, insert, update and delete sẽ được thực hiện thường xuyên để thao tác với dữ liệu thông qua hệ quản trị cơ sở dữ liệu. Đối với Smart Printing Service project, nhóm sẽ sử dụng layered architecture với database layer sẽ được lưu trữ bằng cơ sở dữ liệu quan hệ và sử dụng hệ quản trị cơ sở dữ liệu MySQL, có nghĩa là dữ liệu của ứng dụng sẽ được lưu trữ dưới dạng các bảng và các mối quan hệ giữa chúng. Đối với hệ thống của Smart Printing Service, chúng ta cần phải có các kiểu thực thể như sau:
- User: Lưu các thông tin của khách hàng như: User ID, Họ và tên, Username (Mã hóa), Password (Mã hóa), Năm sinh, Số điện thoại, Email. User sẽ bao gồm hai loại là Khách hàng và Thành viên SPSO. Khách hàng sẽ phải lưu thêm thuộc tính là Số trang in. Thành viên SPSO sẽ phải lưu thêm thuộc tính là Chức vụ. 
- Máy in: Bao gồm các thông tin như: Mã máy in, Nhãn hiệu, Mẫu máy, Mô tả ngắn, Vị trí (Cơ sở, Tòa, Phòng), Trạng thái.
- Đơn in: Bao gồm các thuộc tính như: Mã đơn in, thời gian bắt đầu, thời gian kết thúc, trạng thái, số lượng trang sử dụng.
- Đơn mua trang: Bao gồm các thuộc tính như: Mã giao dịch, Thời điểm giao dịch, số lượng trang mua, giá mua, trạng thái.
- Tài liệu: Lưu các thông tin của file như: Mã tài liệu, tên tài liệu, Loại. Bản thân file đó sẽ được lưu trên File System.
- Báo cáo hệ thống: Bao gồm các thuộc tính như: Mã báo cáo. System Report sẽ gồm hai loại là Monthly và Yearly
- Đơn phản hồi: Bao gồm các thuộc tính như: Mã phản hồi, Tiêu đề, Nội dung, Đánh giá

Link Enhanced ER diagram: https://drive.google.com/file/d/1Brz9Flpyws5-E4pt-zC4lUM5lWa49sGE/view?usp=sharing

API (Application Programming Interface - Giao diên lập trình ứng dụng) là các phương thức, giao thức kết nối với các thư việc và ứng dụng khác. API cung cấp khả năng truy xuất đến một tập các hàm hay dùng. Và từ đó có thể trao đổi dữ liệu giữa các ứng dụng. Các API cho hệ thống in ấn tự động HCMUT_SSPS bao gồm:
- API bảo mật và xác thực: Đảm bảo an toàn cho các giao tiếp và hoạt động in ấn bằng cung cấp các phương thức xác thực thông qua HCMUT-SSO và kiểm soát quyền truy cập bởi SPSO.
- API định dạng và Xử lý Dữ liệu Đầu Vào: Cho phép ứng dụng gửi dữ liệu đầu vào (như tệp in, hình ảnh, hoặc văn bản) cho hệ thống in ấn tự động và đảm bảo rằng dữ liệu này đáp ứng các yêu cầu định dạng và chất lượng cụ thể.
- API quản lý công việc in: Cung cấp các API cho việc tạo, quản lý, và theo dõi các công việc in ấn. Điều này có thể bao gồm lập lịch in, theo dõi trạng thái của công việc in, kiểm tra số trang in khả dụng và hủy bỏ công việc in ấn.
- API thanh toán: Cung cấp khả năng thanh toán (in tài liệu, mua trang in) thông qua BKPay.
- API tùy chỉnh mẫu in: Cung cấp khả năng tạo và quản lý các mẫu in ấn tùy chỉnh. Điều này cho phép ứng dụng tạo mẫu in ấn động dựa trên nhu cầu cụ thể.
- API điều khiển máy in: Cho phép ứng dụng tương tác với máy in.
- API báo cáo và thống kê: Cung cấp dữ liệu về công việc in ấn đã hoàn tất, thời gian in, số lượng trang in, và các thông tin liên quan khác để theo dõi và báo cáo về hoạt động in ấn.